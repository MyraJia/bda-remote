- part_keys = ["part", "size", "resPri", "link", "surfN", "attN"]
%section
  %h1 Craft Details
  %h2= @craft.ship rescue "??"
  %h2 Parts #{@craft.parts.count rescue 0}
  %h3 Summary
  %ul
    - if @craft.nil?
      %li ??
    - else
      - @craft.parts.map { |e| e["part"] }.map { |e| /(.+)_.+/.match(e)[1] }.each_with_object(Hash.new(0)) { |e,h| h[e] += 1 }.map do |part,count|
        %li #{part} (#{count})
  %h3 Stats
  %ul
    %li Root part links: #{@craft.parts.first["link"].nil? ? 0 : (@craft.parts.first["link"].kind_of?(String) ? 1 : @craft.parts.first["link"].count) rescue 0}
    %li Avg links per part: #{@craft.parts.map { |e| e["link"].nil? ? 0 : (e["link"].kind_of?(String) ? 1 : e["link"].count)}.reduce(0, :+).to_f / @craft.parts.count}
    %li Parts with zero links: #{@craft.parts.map { |e| e["link"].nil? ? 1 : 0}.reduce(0, :+)}
    %li Stackiness: #{@craft.stackiness}
    %li Cost: #{number_with_precision(@craft.cost, precision: 0)}
    %li Mass: #{number_with_precision(@craft.mass, precision: 3)}
    %li Points: #{number_with_precision(@craft.points, precision: 0)}
  %h3 Detail
  %ul
    - @craft.parts.each do |part|
      %li
        %h3 Attributes
        %ul
          - part_keys.each do |k|
            - if part[k]
              %li #{k}: #{part[k]}
        %h3 Modules
        %ul
          - part[:modules].each do |m|
            %li
              %h4 Attributes
              %ul
              - m.keys.each do |k|
                %li #{k}: #{m[k]}
        %h3 Resources
        %ul
          - part[:resources].each do |r|
            %li
              %h4 Attributes
              %ul
                - r.keys.each do |k|
                  %li #{k}: #{r[k]}
